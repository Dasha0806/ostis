scp_program -> proc_coordinator (*
	-> rrel_params: .proc_coordinator_params (*
		-> rrel_1: rrel_in: _param;;
		-> rrel_2: rrel_in: _answer;;
	*);;
	-> rrel_operators: ... (*
		// Проходим циклом по элементам множества входных параметров, разбираемся что есть что
		-> rrel_init: .proc_coordinator_search_next_param_element (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _param_element;;

			-> rrel_set_3: rrel_assign: rrel_scp_var: _set_elem;;

			=> nrel_then: .proc_coordinator_add_element_to_set_arc;;
		 	=> nrel_else: .proc_coordinator_return;;	
		*);;

		// Цикл обхода узлов множества
		-> .proc_coordinator_add_element_to_set_arc (*
			<-searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _set_elem;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _loop_arc;;
		-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: _param_element;;

		=>nrel_then: .proc_coordinator_erase_arc;;
		=>nrel_else: .proc_coordinator_erase_set;; 
		*);;

		->.proc_coordinator_return(*
		<-return;;
		*);;

		// Не осталось параматров поиска
		-> .proc_coordinator_erase_set (*
		<-eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _set_elem;;
		=> nrel_goto: .proc_coordinator_return;;
		*);;

		-> .proc_coordinator_erase_arc (*
		<-eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _loop_arc;;

		=> nrel_goto: .proc_coordinator_run_color;;	
		//запуск параметр на цвет
		*);;


// Запуск цветового proc является ли параметр цветом растение
		-> .proc_coordinator_run_color (*
			<-call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: .proc_find_colors_of_type;;//Процесс поиска по цветам РАСТЕНИЯ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //proc_find_colors_of_species
		-> rrel_2: rrel_fixed: rrel_scp_const: inside_agent_coordinator_params (*
			-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _answer;;
			*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
		
		=>nrel_goto: .proc_coordinator_color_params_wait;;
		*);;

			->.proc_coordinator_color_params_wait(*
		<-waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
		
		=>nrel_goto: .proc_coordinator_run_sign;;
		*);;

//ЧАСТИ ТЕЛА КОНЕЦ

// Проверяем является ли параметр ЧАСТЬ ТЕЛА
		-> .proc_coordinator_run_sign (*
			<-call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: .proc_for_finding_species_by_sign;;//Процесс поиска по SIGN!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		-> rrel_2: rrel_fixed: rrel_scp_const: inside_agent_coordinator_params (*
			-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _answer;;
			*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
		
		=>nrel_goto: .proc_coordinator_date_params_wait;;
		*);;

			->.proc_coordinator_date_params_wait(*
		<-waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

		=>nrel_goto: .proc_coordinator_add_element_to_set_arc;;
		*);;
*);;
*);;

